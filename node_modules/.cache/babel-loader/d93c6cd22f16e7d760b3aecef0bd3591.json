{"ast":null,"code":"import _classCallCheck from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/rupak/Rupak/Rupesh/jharna/src/views/polls/Polls.js\";\nimport React from 'react';\nimport { CCard, CCardBody, CCol, CNav, CNavItem, CNavLink, CRow, CTabContent, CTabPane, CTabs } from '@coreui/react';\nimport PollForm from \"./PollForm\";\nimport PollTable from \"./PollTable\";\nimport * as axios from \"axios\";\nimport SuccessAlert from \"../../ui/alerts/SuccessAlert\";\nimport DeleteAlert from \"../../ui/alerts/DeleteAlert\";\nimport Cookies from \"universal-cookie\";\n\nvar Polls = /*#__PURE__*/function (_React$Component) {\n  _inherits(Polls, _React$Component);\n\n  var _super = _createSuper(Polls);\n\n  function Polls(props) {\n    var _this;\n\n    _classCallCheck(this, Polls);\n\n    _this = _super.call(this, props);\n\n    _this.updatePoll = function (pollList) {\n      _this.setState({\n        pollList: pollList\n      });\n    };\n\n    _this.showAlert = function () {\n      _this.setState({\n        showSuccessAlert: true\n      });\n    };\n\n    _this.showDeleteAlert = function () {\n      _this.setState({\n        showSuccessAlert: false,\n        showDeleteAlert: true\n      });\n    };\n\n    _this.showErrorAlert = function (errorMessage) {\n      _this.setState({\n        errorMessage: {\n          showErrorAlert: true,\n          message: errorMessage\n        }\n      });\n    };\n\n    _this.addTabController = function () {\n      _this.setState({\n        modal: {\n          addNavLink: true,\n          addTab: true,\n          manageNavLink: false,\n          manageTab: false\n        },\n        showSuccessAlert: false,\n        showDeleteAlert: false\n      });\n    };\n\n    _this.manageTabController = function () {\n      _this.setState({\n        modal: {\n          addNavLink: false,\n          addTab: false,\n          manageNavLink: true,\n          manageTab: true\n        }\n      });\n    };\n\n    _this.state = {\n      pollList: [],\n      deleteModal: false,\n      showSuccessAlert: false,\n      showDeleteAlert: false,\n      errorMessage: {\n        showErrorAlert: false,\n        message: ''\n      },\n      modal: {\n        addNavLink: true,\n        manageNavLink: false,\n        addTab: true,\n        manageTab: false\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Polls, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var cookies = new Cookies();\n      axios.get('https://frozen-refuge-74833.herokuapp.com/polls/', {\n        headers: {\n          Authorization: cookies.get('token')\n        }\n      }).then(function (response) {\n        console.log(response.data);\n        var data = response.data;\n\n        _this2.setState({\n          pollList: data\n        });\n\n        console.log(\"o/p\" + _this2.state.pollList);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, this.state.errorMessage.showErrorAlert === true ? /*#__PURE__*/React.createElement(DeleteAlert, {\n        message: this.state.errorMessage.showErrorAlert.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }) : null, this.state.showSuccessAlert === true ? /*#__PURE__*/React.createElement(SuccessAlert, {\n        message: \"Polls is added Successfully...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }) : null, this.state.showDeleteAlert === true ? /*#__PURE__*/React.createElement(DeleteAlert, {\n        message: \"Polls is deleted...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }) : null, /*#__PURE__*/React.createElement(CRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CCol, {\n        xs: \"12\",\n        md: \"12\",\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CCard, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CCardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CTabs, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CNav, {\n        variant: \"tabs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(CNavItem, {\n        onClick: this.addTabController,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(CNavLink, {\n        active: this.state.modal.addNavLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 45\n        }\n      }, \"Add Polls\")), /*#__PURE__*/React.createElement(CNavItem, {\n        onClick: this.manageTabController,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(CNavLink, {\n        active: this.state.modal.manageNavLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 45\n        }\n      }, \"Manage\"))), /*#__PURE__*/React.createElement(CTabContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(CTabPane, {\n        active: this.state.modal.addTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(PollForm, {\n        showErrorAlert: this.showErrorAlert,\n        showAlert: this.showAlert,\n        manageTabController: this.manageTabController,\n        updatePoll: this.updatePoll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(CTabPane, {\n        active: this.state.modal.manageTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(PollTable, {\n        showDeleteAlert: this.showDeleteAlert,\n        updatePoll: this.updatePoll,\n        pollList: this.state.pollList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 45\n        }\n      })))))))));\n    }\n  }]);\n\n  return Polls;\n}(React.Component);\n\nexport default Polls;","map":{"version":3,"sources":["/home/rupak/Rupak/Rupesh/jharna/src/views/polls/Polls.js"],"names":["React","CCard","CCardBody","CCol","CNav","CNavItem","CNavLink","CRow","CTabContent","CTabPane","CTabs","PollForm","PollTable","axios","SuccessAlert","DeleteAlert","Cookies","Polls","props","updatePoll","pollList","setState","showAlert","showSuccessAlert","showDeleteAlert","showErrorAlert","errorMessage","message","addTabController","modal","addNavLink","addTab","manageNavLink","manageTab","manageTabController","state","deleteModal","cookies","get","headers","Authorization","then","response","console","log","data","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {CCard, CCardBody, CCol, CNav, CNavItem, CNavLink, CRow, CTabContent, CTabPane, CTabs,} from '@coreui/react'\nimport PollForm from \"./PollForm\";\nimport PollTable from \"./PollTable\";\nimport * as axios from \"axios\";\nimport SuccessAlert from \"../../ui/alerts/SuccessAlert\";\nimport DeleteAlert from \"../../ui/alerts/DeleteAlert\";\nimport Cookies from \"universal-cookie\";\n\nclass Polls extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pollList: [],\n            deleteModal: false,\n            showSuccessAlert: false,\n            showDeleteAlert: false,\n            errorMessage: {\n                showErrorAlert: false,\n                message: ''\n            },\n            modal: {\n                addNavLink: true,\n                manageNavLink: false,\n                addTab: true,\n                manageTab: false\n            }\n\n\n        }\n\n\n    }\n\n    componentDidMount() {\n\n        const cookies = new Cookies();\n\n        axios.get('https://frozen-refuge-74833.herokuapp.com/polls/',\n            {\n                headers: {\n\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                console.log(response.data)\n                const data = response.data\n                this.setState({\n                    pollList: data\n                })\n\n                console.log(\"o/p\" + this.state.pollList)\n            })\n    }\n\n    updatePoll = (pollList) => {\n\n        this.setState({\n            pollList: pollList\n        })\n\n\n    }\n\n    showAlert = () => {\n        this.setState({\n            showSuccessAlert: true\n        })\n\n    }\n\n    showDeleteAlert = () => {\n        this.setState({\n            showSuccessAlert: false,\n            showDeleteAlert: true\n        })\n\n    }\n\n    showErrorAlert = (errorMessage) => {\n        this.setState({\n            errorMessage: {\n                showErrorAlert: true,\n                message: errorMessage\n            }\n        })\n\n    }\n\n    addTabController = () => {\n        this.setState({\n            modal: {\n                addNavLink: true,\n                addTab: true,\n                manageNavLink: false,\n                manageTab: false,\n            },\n            showSuccessAlert: false,\n            showDeleteAlert: false\n        })\n    }\n\n    manageTabController = () => {\n        this.setState({\n            modal: {\n                addNavLink: false,\n                addTab: false,\n                manageNavLink: true,\n                manageTab: true\n            }\n        })\n    }\n\n\n    render() {\n        return (\n\n            <React.Fragment>\n                {this.state.errorMessage.showErrorAlert === true ?\n                    <DeleteAlert\n                        message={this.state.errorMessage.showErrorAlert.errorMessage}/>\n                    : null}\n\n                {this.state.showSuccessAlert === true ?\n                    <SuccessAlert\n                        message={\"Polls is added Successfully...\"}/>\n                    : null}\n\n                {this.state.showDeleteAlert === true ?\n                    <DeleteAlert\n                        message={\"Polls is deleted...\"}/>\n                    : null}\n\n                <CRow>\n                    <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\n                        <CCard>\n                            <CCardBody>\n                                <CTabs>\n                                    <CNav variant=\"tabs\">\n                                        <CNavItem onClick={this.addTabController}>\n                                            <CNavLink active={this.state.modal.addNavLink}>\n                                                Add Polls\n                                            </CNavLink>\n                                        </CNavItem>\n                                        <CNavItem onClick={this.manageTabController}>\n                                            <CNavLink active={this.state.modal.manageNavLink}>\n                                                Manage\n                                            </CNavLink>\n                                        </CNavItem>\n                                    </CNav>\n\n                                    <CTabContent>\n\n                                        <CTabPane active={this.state.modal.addTab}>\n                                            <PollForm\n                                                showErrorAlert={this.showErrorAlert}\n                                                showAlert={this.showAlert}\n                                                manageTabController={this.manageTabController}\n                                                updatePoll={this.updatePoll}/>\n                                        </CTabPane>\n\n                                        <CTabPane active={this.state.modal.manageTab}>\n                                            <PollTable\n                                                showDeleteAlert={this.showDeleteAlert}\n                                                updatePoll={this.updatePoll}\n                                                pollList={this.state.pollList}/>\n                                        </CTabPane>\n\n                                    </CTabContent>\n                                </CTabs>\n                            </CCardBody>\n                        </CCard>\n                    </CCol>\n                </CRow>\n\n            </React.Fragment>\n        )\n    }\n\n\n}\n\nexport default Polls\n"]},"metadata":{},"sourceType":"module"}