{"ast":null,"code":"import _defineProperty from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/rupak/Rupak/Rupesh/jharna/src/views/polls/PollForm.js\";\nimport React from 'react';\nimport { CButton, CCard, CCardBody, CForm, CFormGroup, CInput, CLabel } from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport Cookies from \"universal-cookie\";\n\nvar PollForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(PollForm, _React$Component);\n\n  var _super = _createSuper(PollForm);\n\n  function PollForm(props) {\n    var _this;\n\n    _classCallCheck(this, PollForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleInputChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (e) {\n      e.preventDefault();\n      var cookies = new Cookies();\n      var polls = {\n        polltitle: _this.state.polltitle\n      };\n      axios.post('https://frozen-refuge-74833.herokuapp.com/polls/', polls, {\n        headers: {\n          Authorization: cookies.get('token')\n        }\n      }).then(function (response) {\n        axios.get('https://frozen-refuge-74833.herokuapp.com/polls/', {\n          headers: {\n            Authorization: cookies.get('token')\n          }\n        }).then(function (response) {\n          console.log(response.data);\n          var data = response.data;\n\n          _this.props.updatePoll(data);\n        });\n\n        _this.props.manageTabController();\n\n        _this.props.showAlert();\n      }).catch(function (error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response);\n        } // throw new Error('Sorry Internal Server Error')\n\n\n        this.showError(error.response);\n      });\n    };\n\n    console.log(props);\n    _this.state = {\n      polltitle: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(PollForm, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(CCard, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CCardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CForm, {\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CFormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CLabel, {\n        htmlFor: \"polltitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }\n      }, \"Post tittle\"), /*#__PURE__*/React.createElement(CInput, {\n        name: \"polltitle\",\n        id: \"polltitle\",\n        value: this.state.polltitle,\n        onChange: this.handleInputChange,\n        placeholder: \"Enter Post Tittle\",\n        required: \"required\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(CFormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CButton, {\n        type: \"submit\",\n        size: \"sm\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CIcon, {\n        name: \"cil-scrubber\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 78\n        }\n      }), \" Submit\")))));\n    }\n  }]);\n\n  return PollForm;\n}(React.Component);\n\nexport default PollForm;","map":{"version":3,"sources":["/home/rupak/Rupak/Rupesh/jharna/src/views/polls/PollForm.js"],"names":["React","CButton","CCard","CCardBody","CForm","CFormGroup","CInput","CLabel","axios","CIcon","Cookies","PollForm","props","handleInputChange","e","target","name","value","setState","handleFormSubmit","preventDefault","cookies","polls","polltitle","state","post","headers","Authorization","get","then","response","console","log","data","updatePoll","manageTabController","showAlert","catch","error","showError","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {CButton, CCard, CCardBody, CForm, CFormGroup, CInput, CLabel,} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport Cookies from \"universal-cookie\";\n\nclass PollForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        console.log(props)\n\n        this.state = {\n            polltitle: \"\"\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        const {name, value} = e.target\n\n            this.setState({\n                [name]: value\n            })\n\n\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault()\n\n        const cookies = new Cookies();\n\n        let polls = {\n            polltitle: this.state.polltitle\n        }\n\n        axios.post('https://frozen-refuge-74833.herokuapp.com/polls/', polls,\n            {\n                headers: {\n                    Authorization: cookies.get('token'),\n                },\n            })\n            .then(response => {\n\n                axios.get('https://frozen-refuge-74833.herokuapp.com/polls/',\n                    {\n                        headers: {\n                            Authorization: cookies.get('token'),\n                        },\n                    })\n                    .then(response => {\n\n                        console.log(response.data)\n                        const data = response.data\n\n                        this.props.updatePoll(data)\n\n                    })\n\n                this.props.manageTabController()\n                this.props.showAlert()\n\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    // Request made and server responded\n                    console.log(error.response);\n                }\n\n                // throw new Error('Sorry Internal Server Error')\n                this.showError(error.response)\n            })\n\n    }\n\n\n    render() {\n        return (\n\n\n            <CCard>\n                <CCardBody>\n\n                    <CForm onSubmit={this.handleFormSubmit}>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"polltitle\">Post tittle</CLabel>\n                            <CInput name=\"polltitle\" id=\"polltitle\"\n                                    value={this.state.polltitle}\n                                    onChange={this.handleInputChange}\n                                    placeholder=\"Enter Post Tittle\"\n                                    required=\"required\"/>\n                        </CFormGroup>\n\n                        <CFormGroup>\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\"><CIcon\n                                name=\"cil-scrubber\"/> Submit</CButton>\n                        </CFormGroup>\n\n                    </CForm>\n                </CCardBody>\n\n            </CCard>\n\n\n        )\n    }\n}\n\nexport default PollForm\n"]},"metadata":{},"sourceType":"module"}