{"ast":null,"code":"import _defineProperty from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/rupak/Rupak/Rupesh/jharna/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/rupak/Rupak/Rupesh/jharna/src/views/polls/PollForm.js\";\nimport React from 'react';\nimport { CButton, CCard, CCardBody, CCol, CForm, CFormGroup, CInput, CInputRadio, CLabel } from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport Cookies from \"universal-cookie\";\n\nvar PollForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(PollForm, _React$Component);\n\n  var _super = _createSuper(PollForm);\n\n  function PollForm(props) {\n    var _this;\n\n    _classCallCheck(this, PollForm);\n\n    _this = _super.call(this, props);\n\n    _this.handleInputChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      if (name === 'yes') {\n        _this.setState({\n          yes: 1,\n          no: 0\n        });\n      } else if (name === 'no') {\n        _this.setState({\n          yes: 0,\n          no: 1\n        });\n      } else {\n        _this.setState(_defineProperty({}, name, value));\n      }\n    };\n\n    _this.handleFormSubmit = function (e) {\n      e.preventDefault();\n      var cookies = new Cookies();\n      var polls = {\n        polltitle: _this.state.polltitle,\n        yes: _this.state.yes,\n        no: _this.state.no,\n        notificationdate: _this.state.notificationdate\n      };\n      axios.post('http://localhost:3000/polls/', polls, {\n        headers: {\n          Authorization: cookies.get('token')\n        }\n      }).then(function (response) {\n        axios.get('http://localhost:3000/polls/').then(function (response) {\n          console.log(response.data);\n          var data = response.data;\n\n          _this.props.updatePoll(data);\n        });\n\n        _this.props.manageTabController();\n\n        _this.props.showAlert();\n      }).catch(function (error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response);\n        } // throw new Error('Sorry Internal Server Error')\n\n\n        this.showError(error.response);\n      });\n    };\n\n    console.log(props);\n    _this.state = {\n      polltitle: \"\",\n      yes: \"\",\n      no: \"\",\n      notificationdate: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(PollForm, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement, _React$createElement2;\n\n      return /*#__PURE__*/React.createElement(CCard, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CCardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CForm, {\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CFormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CLabel, {\n        htmlFor: \"polltitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }\n      }, \"Post tittle\"), /*#__PURE__*/React.createElement(CInput, {\n        name: \"polltitle\",\n        id: \"polltitle\",\n        value: this.state.polltitle,\n        onChange: this.handleInputChange,\n        placeholder: \"Enter Post Tittle\",\n        required: \"required\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(CFormGroup, {\n        row: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CCol, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 33\n        }\n      }, \"Answer(Yes/No)\"), /*#__PURE__*/React.createElement(CFormGroup, {\n        variant: \"custom-radio\",\n        inline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CInputRadio, (_React$createElement = {\n        custom: true,\n        id: \"inline-radio1\",\n        name: \"yes\",\n        value: \"1\",\n        onChange: this.handleInputChange\n      }, _defineProperty(_React$createElement, \"value\", this.state.yes), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 37\n      }), _React$createElement)), /*#__PURE__*/React.createElement(CLabel, {\n        variant: \"custom-checkbox\",\n        htmlFor: \"inline-radio1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 37\n        }\n      }, \"Yes\")), /*#__PURE__*/React.createElement(CFormGroup, {\n        variant: \"custom-radio\",\n        inline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CInputRadio, (_React$createElement2 = {\n        custom: true,\n        id: \"inline-radio2\",\n        name: \"no\",\n        value: \"1\",\n        onChange: this.handleInputChange\n      }, _defineProperty(_React$createElement2, \"value\", this.state.no), _defineProperty(_React$createElement2, \"__self\", this), _defineProperty(_React$createElement2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 37\n      }), _React$createElement2)), /*#__PURE__*/React.createElement(CLabel, {\n        variant: \"custom-checkbox\",\n        htmlFor: \"inline-radio2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 37\n        }\n      }, \"No\")))), /*#__PURE__*/React.createElement(CFormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CButton, {\n        type: \"submit\",\n        size: \"sm\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CIcon, {\n        name: \"cil-scrubber\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 78\n        }\n      }), \" Submit\"), /*#__PURE__*/React.createElement(CButton, {\n        type: \"reset\",\n        size: \"sm\",\n        color: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CIcon, {\n        name: \"cil-ban\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 76\n        }\n      }), \" Reset\")))));\n    }\n  }]);\n\n  return PollForm;\n}(React.Component);\n\nexport default PollForm;","map":{"version":3,"sources":["/home/rupak/Rupak/Rupesh/jharna/src/views/polls/PollForm.js"],"names":["React","CButton","CCard","CCardBody","CCol","CForm","CFormGroup","CInput","CInputRadio","CLabel","axios","CIcon","Cookies","PollForm","props","handleInputChange","e","target","name","value","setState","yes","no","handleFormSubmit","preventDefault","cookies","polls","polltitle","state","notificationdate","post","headers","Authorization","get","then","response","console","log","data","updatePoll","manageTabController","showAlert","catch","error","showError","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {CButton, CCard, CCardBody, CCol, CForm, CFormGroup, CInput, CInputRadio, CLabel,} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport Cookies from \"universal-cookie\";\n\nclass PollForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        console.log(props)\n\n        this.state = {\n            polltitle: \"\",\n            yes: \"\",\n            no: \"\",\n            notificationdate: \"\",\n        }\n    }\n\n    handleInputChange = (e) => {\n\n\n        const {name, value} = e.target\n\n        if (name === 'yes') {\n\n            this.setState({\n                yes: 1,\n                no: 0\n            })\n\n        } else if (name === 'no') {\n\n            this.setState({\n                yes: 0,\n                no: 1\n            })\n\n        } else {\n            this.setState({\n                [name]: value\n            })\n        }\n\n\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault()\n\n        const cookies = new Cookies();\n\n        let polls = {\n            polltitle: this.state.polltitle,\n            yes: this.state.yes,\n            no: this.state.no,\n            notificationdate: this.state.notificationdate,\n        }\n\n\n        axios.post('http://localhost:3000/polls/', polls,\n            {\n                headers: {\n                    Authorization: cookies.get('token'),\n                },\n            })\n            .then(response => {\n\n                axios.get('http://localhost:3000/polls/')\n                    .then(response => {\n\n                        console.log(response.data)\n                        const data = response.data\n\n                        this.props.updatePoll(data)\n\n                    })\n\n                this.props.manageTabController()\n                this.props.showAlert()\n\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    // Request made and server responded\n                    console.log(error.response);\n                }\n\n                // throw new Error('Sorry Internal Server Error')\n                this.showError(error.response)\n            })\n\n    }\n\n\n    render() {\n        return (\n\n\n            <CCard>\n                <CCardBody>\n\n                    <CForm onSubmit={this.handleFormSubmit}>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"polltitle\">Post tittle</CLabel>\n                            <CInput name=\"polltitle\" id=\"polltitle\"\n                                    value={this.state.polltitle}\n                                    onChange={this.handleInputChange}\n                                    placeholder=\"Enter Post Tittle\"\n                                    required=\"required\"/>\n                        </CFormGroup>\n\n                        <CFormGroup row>\n                            <CCol md=\"3\">\n                                <CLabel>Answer(Yes/No)</CLabel>\n\n                                <CFormGroup variant=\"custom-radio\" inline>\n                                    <CInputRadio custom id=\"inline-radio1\"\n                                                 name=\"yes\"\n                                                 value=\"1\"\n                                                 onChange={this.handleInputChange}\n                                                 value={this.state.yes}/>\n                                    <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-radio1\">Yes</CLabel>\n                                </CFormGroup>\n                                <CFormGroup variant=\"custom-radio\" inline>\n                                    <CInputRadio custom id=\"inline-radio2\"\n                                                 name=\"no\"\n                                                 value=\"1\"\n                                                 onChange={this.handleInputChange}\n                                                 value={this.state.no}/>\n                                    <CLabel variant=\"custom-checkbox\" htmlFor=\"inline-radio2\">No</CLabel>\n                                </CFormGroup>\n                            </CCol>\n\n                        </CFormGroup>\n\n                        <CFormGroup>\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\"><CIcon\n                                name=\"cil-scrubber\"/> Submit</CButton>\n                            <CButton type=\"reset\" size=\"sm\" color=\"danger\"><CIcon name=\"cil-ban\"/> Reset</CButton>\n                        </CFormGroup>\n\n                    </CForm>\n                </CCardBody>\n\n            </CCard>\n\n\n        )\n    }\n}\n\nexport default PollForm\n"]},"metadata":{},"sourceType":"module"}