{"version":3,"sources":["views/feeds/Feeds.js","views/feeds/NewsFeeds.js","App.js","serviceWorker.js","store.js","index.js"],"names":["Feeds","state","newsList","cookies","Cookies","axios","headers","Authorization","get","then","response","console","log","data","setState","this","map","news","index","xs","sm","md","posttitle","postcategory","fluid","to","_id","src","images","alt","style","width","height","key","postdetails","postconclusion","quote","url","logoFillColor","React","Component","NewsFeeds","props","id","match","params","loading","className","TheLayout","lazy","Login","App","Suspense","fallback","exact","path","name","render","from","Boolean","window","location","hostname","initialState","sidebarShow","store","createStore","type","rest","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ab56031.chunk.js","sourcesContent":["import React from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CContainer,\n    CImg,\n    CJumbotron,\n    CListGroup,\n    CListGroupItem\n} from \"@coreui/react\";\nimport Cookies from \"universal-cookie\";\nimport * as axios from \"axios\";\nimport {Link} from \"react-router-dom\";\nimport {FacebookIcon, FacebookShareButton} from \"react-share\";\n\nclass Feeds extends React.Component {\n\n    state = {\n        newsList: []\n    }\n\n    componentDidMount() {\n\n\n        const cookies = new Cookies();\n\n        axios.get('https://frozen-refuge-74833.herokuapp.com/usersnews/',\n            {\n                headers: {\n\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                console.log(response.data)\n                const data = response.data\n\n                this.setState({\n                    newsList: data\n                })\n\n                console.log(\"o/p\" + this.state.newsList)\n            })\n\n\n    }\n\n\n    render() {\n        return (\n\n            (this.state.newsList?.map((news, index) => (\n                    <CCol xs=\"12\" sm=\"12\" md=\"12\">\n                        <CCard>\n                            <CCardHeader>\n                                {news.posttitle}\n                            </CCardHeader>\n                            <CCardBody>\n\n                                <CListGroupItem>\n                                    <h3> Post Category:</h3> {news.postcategory}\n                                </CListGroupItem>\n\n\n                                <CJumbotron fluid>\n\n                                    <Link to={`/feeds/details/${news._id}`}>\n                                        <CContainer fluid>\n                                            <CImg src={\"https://frozen-refuge-74833.herokuapp.com/PostImage/\" + news.images}\n                                                  alt=\"image\"\n                                                  style={{width: 500, height: 400}}/>\n                                        </CContainer>\n                                    </Link>\n\n\n                                </CJumbotron>\n                                <CListGroup>\n                                    <CListGroupItem key={1}>\n                                        {news.postdetails}\n                                    </CListGroupItem>\n                                    <CListGroupItem key={2}>\n                                        <h3> Post Conclusion:</h3>{news.postconclusion}\n                                    </CListGroupItem>\n\n                                    <CListGroupItem key={2}>\n                                        <FacebookShareButton\n                                            quote={news.posttitle}\n                                            url={`https://festive-jepsen-4d10b9.netlify.app/#/feeds/details/${news._id}`}>\n\n                                            <FacebookIcon logoFillColor=\"white\"/>\n                                        </FacebookShareButton>\n                                    </CListGroupItem>\n\n                                </CListGroup>\n\n\n                            </CCardBody>\n\n                        </CCard>\n                    </CCol>\n                ))\n            )\n\n\n        )\n    }\n\n\n}\n\nexport default Feeds\n","import React from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CContainer,\n    CImg,\n    CJumbotron,\n    CListGroup,\n    CListGroupItem\n} from \"@coreui/react\";\nimport Cookies from \"universal-cookie\";\nimport * as axios from \"axios\";\n\nclass NewsFeeds extends React.Component {\n\n    state = {\n        news: []\n    }\n\n    componentDidMount() {\n\n        console.log(this.props)\n\n        const id=this.props.match.params.id\n\n        const cookies = new Cookies();\n\n        axios.get(`https://frozen-refuge-74833.herokuapp.com/posts/${id}`,\n            {\n                headers: {\n\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                console.log(response.data)\n                const data = response.data\n\n                this.setState({\n                    news: data\n                })\n\n            })\n\n\n    }\n\n\n    render() {\n        return (\n\n                    <CCol xs=\"12\" sm=\"12\" md=\"12\">\n                        <CCard>\n                            <CCardHeader>\n                                {this.state.news.posttitle}\n                            </CCardHeader>\n                            <CCardBody>\n\n                                <CListGroupItem>\n                                    <h3> Post Category:</h3> {this.state.news.postcategory}\n                                </CListGroupItem>\n\n\n                                <CJumbotron fluid>\n                                    <CContainer fluid>\n                                        <CImg src={\"https://frozen-refuge-74833.herokuapp.com/PostImage/\" + this.state.news.images}\n                                              alt=\"image\"\n                                              style={{width: 500, height: 400}}/>\n                                    </CContainer>\n                                </CJumbotron>\n                                <CListGroup>\n                                    <CListGroupItem key={1}>\n                                        {this.state.news.postdetails}\n                                    </CListGroupItem>\n                                    <CListGroupItem key={2}>\n                                        <h3> Post Conclusion:</h3>{this.state.news.postconclusion}\n                                    </CListGroupItem>\n\n                                </CListGroup>\n\n                            </CCardBody>\n\n                        </CCard>\n                    </CCol>\n\n\n        )\n    }\n\n\n}\n\nexport default NewsFeeds\n","import React, {Component} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport './scss/style.scss';\nimport Cookies from \"universal-cookie\";\nimport Feeds from \"./views/feeds/Feeds\";\nimport NewsFeeds from \"./views/feeds/NewsFeeds\";\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst TheLayout = React.lazy(() => import('./containers/TheLayout'));\n\n// Pages\nconst Login = React.lazy(() => import('./views/login/Login'));\n\nclass App extends Component {\n\n  render() {\n    const cookies = new Cookies();\n\n    return (\n      <HashRouter>\n          <React.Suspense fallback={loading}>\n            <Switch>\n\n              <Route exact path=\"/feeds\" name=\"News Feeds\" render={props => <Feeds {...props}/>} />\n\n                <Route exact path=\"/feeds/details/:id\" name=\"News Feeds Details\" render={props => <NewsFeeds {...props}/>} />\n\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\n              <Route path=\"/\" name=\"Home\" render={props =>\n\n                  (cookies.get('token')!=null?\n                  <TheLayout {...props}/>:\n                      <Redirect from=\"/\" to=\"/feeds\" />\n                      )\n\n              }\n              />\n            </Switch>\n          </React.Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: 'responsive'\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>, \n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}