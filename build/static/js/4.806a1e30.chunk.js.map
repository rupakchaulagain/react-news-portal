{"version":3,"sources":["api/Api.js","ui/alerts/SuccessAlert.js","ui/alerts/DeleteAlert.js","views/polls/PollForm.js","views/polls/modals/DeleteModal.js","views/polls/modals/DetailModal.js","views/polls/modals/EditModal.js","views/polls/PollTable.js","views/polls/Polls.js"],"names":["BASE_URL","SuccessAlert","props","color","closeButton","message","DeleteAlert","PollForm","handleInputChange","e","target","name","value","setState","handleFormSubmit","preventDefault","cookies","Cookies","polls","polltitle","state","axios","headers","Authorization","get","then","response","console","log","data","updatePoll","manageTabController","showAlert","catch","error","this","showError","onSubmit","htmlFor","id","onChange","placeholder","required","type","size","React","Component","DeleteModal","handleDeleteBtn","toggle","showDeleteAlert","show","modal","onClose","onClick","selectedItem","DetailModal","modalCancelBtn","detailModalToggle","poll","detailModal","xs","sm","disabled","EditModal","_id","editModalToggle","news","editItem","editModal","fields","PollTable","pollList","useState","setModal","setDetailModal","setEditModal","setSelectedItem","setEditItem","Fragment","items","bordered","itemsPerPage","pagination","scopedSlots","item","className","key","Polls","showSuccessAlert","showErrorAlert","errorMessage","addTabController","addNavLink","addTab","manageNavLink","manageTab","deleteModal","md","variant","active"],"mappings":"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","file":"static/js/4.806a1e30.chunk.js","sourcesContent":["export  const BASE_URL=\"https://frozen-atoll-28362.herokuapp.com\"","import React from \"react\"\nimport {CAlert} from \"@coreui/react\";\n\nconst SuccessAlert=(props)=>{\n\n  return(\n    <CAlert color=\"success\"\n            closeButton>\n      {props.message}\n    </CAlert>\n  )\n\n}\n\nexport default SuccessAlert\n","import React from \"react\"\nimport {CAlert} from \"@coreui/react\";\n\nconst DeleteAlert=(props)=>{\n\n  return(\n    <CAlert color=\"danger\"\n            closeButton>\n      {props.message}\n    </CAlert>\n\n  )\n\n}\n\nexport default DeleteAlert\n","import React from 'react'\nimport {CButton, CCard, CCardBody, CForm, CFormGroup, CInput, CLabel,} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport Cookies from \"universal-cookie\";\nimport {BASE_URL} from \"../../api/Api\";\n\nclass PollForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        console.log(props)\n\n        this.state = {\n            polltitle: \"\"\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        const {name, value} = e.target\n\n            this.setState({\n                [name]: value\n            })\n\n\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault()\n\n        const cookies = new Cookies();\n\n        let polls = {\n            polltitle: this.state.polltitle\n        }\n\n        axios.post(BASE_URL+'/polls/', polls,\n            {\n                headers: {\n                    Authorization: cookies.get('token'),\n                },\n            })\n            .then(response => {\n\n                axios.get(BASE_URL+'/polls/',\n                    {\n                        headers: {\n                            Authorization: cookies.get('token'),\n                        },\n                    })\n                    .then(response => {\n\n                        console.log(response.data)\n                        const data = response.data\n\n                        this.props.updatePoll(data)\n\n                    })\n\n                this.props.manageTabController()\n                this.props.showAlert()\n\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    // Request made and server responded\n                    console.log(error.response);\n                }\n\n                // throw new Error('Sorry Internal Server Error')\n                this.showError(error.response)\n            })\n\n    }\n\n\n    render() {\n        return (\n\n\n            <CCard>\n                <CCardBody>\n\n                    <CForm onSubmit={this.handleFormSubmit}>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"polltitle\">Post tittle</CLabel>\n                            <CInput name=\"polltitle\" id=\"polltitle\"\n                                    value={this.state.polltitle}\n                                    onChange={this.handleInputChange}\n                                    placeholder=\"Enter Post Tittle\"\n                                    required=\"required\"/>\n                        </CFormGroup>\n\n                        <CFormGroup>\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\"><CIcon\n                                name=\"cil-scrubber\"/> Submit</CButton>\n                        </CFormGroup>\n\n                    </CForm>\n                </CCardBody>\n\n            </CCard>\n\n\n        )\n    }\n}\n\nexport default PollForm\n","import React from 'react'\nimport {CButton, CModal, CModalBody, CModalFooter, CModalHeader} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport {BASE_URL} from \"../../../api/Api\";\n\nclass DeleteModal extends React.Component {\n\n    handleDeleteBtn = (id) => {\n\n        const cookies = new Cookies();\n\n        axios.delete(BASE_URL+`/polls/${id}`,\n            {\n                headers: {\n\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                axios.get(BASE_URL+'/polls/',\n                    {\n                        headers: {\n\n                            Authorization: cookies.get('token')\n                        }\n                    }\n                )\n                    .then(response => {\n\n                        console.log(response.data)\n                        const data = response.data\n\n                        this.props.updatePoll(data)\n                    })\n\n                this.props.toggle()\n\n                this.props.showDeleteAlert()\n\n\n            })\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <CModal\n                    show={this.props.modal}\n                    onClose={this.props.toggle}\n                >\n                    <CModalHeader closeButton>Delete Polls</CModalHeader>\n                    <CModalBody>\n                        Are you sure want to delete?\n                    </CModalBody>\n                    <CModalFooter>\n\n                        <CButton\n                            color=\"secondary\"\n                            onClick={this.props.toggle}\n                        >Cancel</CButton>{' '}\n                        <CButton onClick={() => this.handleDeleteBtn(this.props.selectedItem)}\n                                 color=\"danger\">Delete</CButton>\n                    </CModalFooter>\n                </CModal>\n            </>\n        )\n    }\n}\n\nexport default DeleteModal\n","import React from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCol,\n    CFormGroup,\n    CInput,\n    CLabel,\n    CModal,\n    CModalBody,\n    CModalHeader,\n    CRow\n} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport {BASE_URL} from \"../../../api/Api\";\n\nclass DetailModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            poll: {}\n        }\n    }\n\n    componentDidMount() {\n        const cookies = new Cookies();\n\n        axios.get(BASE_URL+`/polls/${this.props.selectedItem}`,\n            {\n                headers: {\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                this.setState({\n                    poll: response.data\n                })\n\n            })\n    }\n\n    modalCancelBtn = () => {\n\n        this.props.selectedItem = null\n        this.props.detailModalToggle()\n    }\n\n    render() {\n\n        return (\n            <>\n                <CModal size={'xl'}\n                        show={this.props.detailModal}\n                        onClose={this.props.detailModalToggle}\n                >\n                    <CModalHeader closeButton>News Detail</CModalHeader>\n                    <CModalBody>\n\n                        <CRow>\n\n                            <CCol xs=\"12\" sm=\"6\">\n                                <CCard>\n                                    <CCardBody>\n\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"posttitle\">Post Tittle</CLabel>\n                                            <CInput name=\"posttitle\"\n                                                    value={this.state.poll.polltitle} disabled=\"disabled\"/>\n                                        </CFormGroup>\n\n\n                                    </CCardBody>\n\n                                </CCard>\n                            </CCol>\n\n                        </CRow>\n\n                    </CModalBody>\n                </CModal>\n            </>\n        )\n    }\n\n}\n\nexport default DetailModal\n","import React from 'react'\nimport {CButton, CForm, CFormGroup, CInput, CLabel, CModal, CModalBody, CModalHeader} from \"@coreui/react\";\nimport * as axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport CIcon from \"@coreui/icons-react\";\nimport {BASE_URL} from \"../../../api/Api\";\n\nclass EditModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            news: {},\n            _id: this.props.editItem,\n            polltitle: \"\",\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault()\n\n        const cookies = new Cookies();\n\n\n        let polls = {\n            polltitle: this.state.polltitle,\n        }\n        \n        axios.put(BASE_URL+`/polls/${this.state._id}`, polls,\n            {\n                headers: {\n                    Authorization: cookies.get('token'),\n                },\n            })\n            .then(response => {\n\n                axios.get(BASE_URL+'/polls/',\n                    {\n                        headers: {\n\n                            Authorization: cookies.get('token')\n                        }\n                    }\n                )\n                    .then(response => {\n\n                        console.log(response.data)\n                        const data = response.data\n\n                        this.props.updatePoll(data)\n\n                    })\n\n                this.props.editModalToggle()\n\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    // Request made and server responded\n                    console.log(error.response);\n                }\n\n                // throw new Error('Sorry Internal Server Error')\n                this.showError(error.response)\n            })\n\n    }\n\n    componentDidMount() {\n        const cookies = new Cookies();\n\n        axios.get(BASE_URL+`/polls/${this.props.editItem}`,\n            {\n                headers: {\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                let poll = response.data\n                this.setState({\n                    polltitle: poll.polltitle\n                })\n\n            })\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <CModal size={'xl'}\n                        show={this.props.editModal}\n                        onClose={this.props.editModalToggle}\n                >\n                    <CModalHeader closeButton>Polls Detail</CModalHeader>\n                    <CModalBody>\n\n                        <CForm onSubmit={this.handleFormSubmit}>\n                            <CFormGroup>\n\n                                <CLabel htmlFor=\"posttitle\">Poll tittle</CLabel>\n                                <CInput name=\"polltitle\" id=\"polltitle\"\n                                        value={this.state.polltitle}\n                                        onChange={this.handleInputChange}\n                                        required=\"required\"/>\n                            </CFormGroup>\n\n\n                            <CFormGroup>\n                                <CButton type=\"submit\" size=\"sm\" color=\"primary\"><CIcon\n                                    name=\"cil-scrubber\"/> Submit</CButton>\n                            </CFormGroup>\n\n                        </CForm>\n\n                    </CModalBody>\n                </CModal>\n            </>\n        )\n    }\n\n}\n\nexport default EditModal\n","import {CDataTable, CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle} from \"@coreui/react\";\nimport React, {useState} from \"react\";\nimport DeleteModal from \"./modals/DeleteModal\";\nimport DetailModal from \"./modals/DetailModal\";\nimport EditModal from \"./modals/EditModal\";\n\nconst fields = [\n\n    'notificationdate',\n    'polltitle',\n    'createdAt',\n    'updatedAt',\n    'actions']\n\nconst PollTable = (props) => {\n\n    let pollList = props.pollList\n    const [modal, setModal] = useState(false);\n    const [detailModal, setDetailModal] = useState(false);\n    const [editModal, setEditModal] = useState(false);\n    const [selectedItem, setSelectedItem] = useState(false);\n    const [editItem, setEditItem] = useState(false);\n\n    const detailModalToggle = (id) => {\n        setSelectedItem(id)\n        setDetailModal(!detailModal);\n\n    }\n\n    const editModalToggle = (id) => {\n        setEditItem(id)\n        setEditModal(!editModal);\n\n    }\n\n    const toggle = (id) => {\n\n        setSelectedItem(id)\n        setModal(!modal);\n\n    }\n\n\n    return (\n        <React.Fragment>\n            {selectedItem ? <DetailModal\n                selectedItem={selectedItem}\n                detailModal={detailModal}\n                detailModalToggle={detailModalToggle}/> : null}\n\n            {editItem ? <EditModal\n                updatePoll={props.updatePoll}\n                editItem={editItem}\n                editModal={editModal}\n                editModalToggle={editModalToggle}/> : null}\n            <DeleteModal\n                showDeleteAlert={props.showDeleteAlert}\n                updatePoll={props.updatePoll}\n                selectedItem={selectedItem}\n                modal={modal}\n                toggle={toggle}/>\n\n            <CDataTable\n                items={pollList}\n                fields={fields}\n                bordered\n                itemsPerPage={10}\n                pagination\n                scopedSlots={{\n                    'actions':\n                        (item) => (\n                            <td>\n\n                                <CDropdown className=\"m-1 btn-group\">\n                                    <CDropdownToggle color=\"primary\">\n                                        Actions\n                                    </CDropdownToggle>\n                                    <CDropdownMenu>\n\n                                        <CDropdownItem\n                                            onClick={() => detailModalToggle(item._id)}>View</CDropdownItem>\n\n                                        <CDropdownItem\n                                            onClick={() => editModalToggle(item._id)}>Edit</CDropdownItem>\n\n                                        <CDropdownItem\n                                            key={item._id}\n                                            onClick={() => toggle(item._id)}>Delete</CDropdownItem>\n                                    </CDropdownMenu>\n                                </CDropdown>\n\n\n                            </td>\n                        )\n\n                }}\n            />\n        </React.Fragment>\n    )\n}\n\nexport default PollTable\n","import React from 'react'\nimport {CCard, CCardBody, CCol, CNav, CNavItem, CNavLink, CRow, CTabContent, CTabPane, CTabs,} from '@coreui/react'\nimport PollForm from \"./PollForm\";\nimport PollTable from \"./PollTable\";\nimport * as axios from \"axios\";\nimport SuccessAlert from \"../../ui/alerts/SuccessAlert\";\nimport DeleteAlert from \"../../ui/alerts/DeleteAlert\";\nimport Cookies from \"universal-cookie\";\nimport {BASE_URL} from \"../../api/Api\";\n\nclass Polls extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pollList: [],\n            deleteModal: false,\n            showSuccessAlert: false,\n            showDeleteAlert: false,\n            errorMessage: {\n                showErrorAlert: false,\n                message: ''\n            },\n            modal: {\n                addNavLink: true,\n                manageNavLink: false,\n                addTab: true,\n                manageTab: false\n            }\n\n\n        }\n\n\n    }\n\n    componentDidMount() {\n\n        const cookies = new Cookies();\n\n        axios.get(BASE_URL+'/polls/',\n            {\n                headers: {\n\n                    Authorization: cookies.get('token')\n                }\n            }\n        )\n            .then(response => {\n\n                console.log(response.data)\n                const data = response.data\n                this.setState({\n                    pollList: data\n                })\n\n                console.log(\"o/p\" + this.state.pollList)\n            })\n    }\n\n    updatePoll = (pollList) => {\n\n        this.setState({\n            pollList: pollList\n        })\n\n\n    }\n\n    showAlert = () => {\n        this.setState({\n            showSuccessAlert: true\n        })\n\n    }\n\n    showDeleteAlert = () => {\n        this.setState({\n            showSuccessAlert: false,\n            showDeleteAlert: true\n        })\n\n    }\n\n    showErrorAlert = (errorMessage) => {\n        this.setState({\n            errorMessage: {\n                showErrorAlert: true,\n                message: errorMessage\n            }\n        })\n\n    }\n\n    addTabController = () => {\n        this.setState({\n            modal: {\n                addNavLink: true,\n                addTab: true,\n                manageNavLink: false,\n                manageTab: false,\n            },\n            showSuccessAlert: false,\n            showDeleteAlert: false\n        })\n    }\n\n    manageTabController = () => {\n        this.setState({\n            modal: {\n                addNavLink: false,\n                addTab: false,\n                manageNavLink: true,\n                manageTab: true\n            }\n        })\n    }\n\n\n    render() {\n        return (\n\n            <React.Fragment>\n                {this.state.errorMessage.showErrorAlert === true ?\n                    <DeleteAlert\n                        message={this.state.errorMessage.showErrorAlert.errorMessage}/>\n                    : null}\n\n                {this.state.showSuccessAlert === true ?\n                    <SuccessAlert\n                        message={\"Polls is added Successfully...\"}/>\n                    : null}\n\n                {this.state.showDeleteAlert === true ?\n                    <DeleteAlert\n                        message={\"Polls is deleted...\"}/>\n                    : null}\n\n                <CRow>\n                    <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\n                        <CCard>\n                            <CCardBody>\n                                <CTabs>\n                                    <CNav variant=\"tabs\">\n                                        <CNavItem onClick={this.addTabController}>\n                                            <CNavLink active={this.state.modal.addNavLink}>\n                                                Add Polls\n                                            </CNavLink>\n                                        </CNavItem>\n                                        <CNavItem onClick={this.manageTabController}>\n                                            <CNavLink active={this.state.modal.manageNavLink}>\n                                                Manage\n                                            </CNavLink>\n                                        </CNavItem>\n                                    </CNav>\n\n                                    <CTabContent>\n\n                                        <CTabPane active={this.state.modal.addTab}>\n                                            <PollForm\n                                                showErrorAlert={this.showErrorAlert}\n                                                showAlert={this.showAlert}\n                                                manageTabController={this.manageTabController}\n                                                updatePoll={this.updatePoll}/>\n                                        </CTabPane>\n\n                                        <CTabPane active={this.state.modal.manageTab}>\n                                            <PollTable\n                                                showDeleteAlert={this.showDeleteAlert}\n                                                updatePoll={this.updatePoll}\n                                                pollList={this.state.pollList}/>\n                                        </CTabPane>\n\n                                    </CTabContent>\n                                </CTabs>\n                            </CCardBody>\n                        </CCard>\n                    </CCol>\n                </CRow>\n\n            </React.Fragment>\n        )\n    }\n\n\n}\n\nexport default Polls\n"],"sourceRoot":""}